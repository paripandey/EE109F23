			      EE 109 - Fall 2023
			 Lab 4 - Using the LCD Display

Edit the document below to fill in your answers to the review problems at the
end of the assignment web page.

1. (2 points) Normally we only read the bits in the PIN register, but a close
reading of the ATmega328P datasheet reveals that writing a 1 to PIN register
bit has the effect of inverting the bit in the corresponding PORT register.
For example, if you write a 1 to PINC, bit 3, it will invert bit 3 in the PORTC
register.  Based on this information, Billy Bruin has decided that he now knows
an easy way to "toggle" the E bit (flipping it to its opposite value) to
generate the E pulse in the lcd_writenibble() function by using this code.

    PINB |= (1 << PB1)     // Toggle E bit from 0 to 1
    PORTB |= (1 << PB1);   // Delay to make the E pulse longer
    PINB |= (1 << PB1)     // Toggle E bit from 1 to 0

Note: PINB |= (1 << PB1); is equivalent to PINB = PINB | (1 << PB1);

Tammy Trojan has also read the datasheeet and found that when reading the PIN
register, if a bit in the group is configured as input, the the voltage coming
in the PIN is returned, but if a bit is configured as output, the corresponding
PORT bit value is returned.  From this she concludes that Billy's method can
cause problems when used and recommends using this code to generate the E
pulse.

    PINB = (1 << PB1)      // Toggle E bit from 0 to 1
    PORTB |= (1 << PB1);   // Delay to make the E pulse longer
    PINB = (1 << PB1)      // Toggle E bit from 1 to 0

Tammy says that in this lab assignment with the PAUSE button on PB3, Billy
Bruin's code will cause the PAUSE button to stop working.  Can you explain why
this would happen?

Billy's first statement writes to all bits in the PINB register; this means that
it will write a 1 to bit 3 of the PINB register whenever that input "reads" in
a 1 when the PAUSE button is not pressed, for example. This would invert bit 3 in the PORTB
register from 1 to 0, which would mean the pull-up resistor for the PAUSE button
is no longer configured. Then 0 OR'd with 0 in the 2nd statement results in 0,
and this whole process becomes messy.


2. (1 point) Suppose we need to perform 3 concurrent tasks intermittently: Task
A every 20 ms, Task B every 15 ms, and Task C every 40 ms. What delay should be
used on each iteration of the main loop?

The delay used should be 5 ms, which is the greatest common divisor (GCD) of all the numbers.
In this way, we can then declare a counter variable to perform the appropriate tasks once it
reaches 4, 3, and 8, respectively.